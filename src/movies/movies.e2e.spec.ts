import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication, ValidationPipe } from '@nestjs/common';
import * as request from 'supertest';
import { App } from 'supertest/types';
import { AppModule } from 'src/app.module';

describe('MoviesController (e2e)', () => {
  let app: INestApplication<App>;
  let token: string;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    app.useGlobalPipes(
      new ValidationPipe({
        whitelist: true, // ‚ùå DTOÏóê Ï†ïÏùòÎêòÏßÄ ÏïäÏùÄ ÏÜçÏÑ±ÏùÄ ÏûêÎèô Ï†úÍ±∞
        forbidNonWhitelisted: true, // üö® Ï†ïÏùòÎêòÏßÄ ÏïäÏùÄ ÏÜçÏÑ±Ïù¥ ÏûàÏúºÎ©¥ 400 ÏóêÎü¨ Î∞úÏÉù
        transform: true, // üéØ DTOÏùò ÌÉÄÏûÖÏùÑ ÏûêÎèô Î≥ÄÌôò (Ïòà: "1" -> 1)
        transformOptions: {
          enableImplicitConversion: true, // üéØ boolean, number Îì±ÏúºÎ°ú Î≥ÄÌôò
        }
      }),
    );
    await app.init();

      // Î°úÍ∑∏Ïù∏Ìï¥ÏÑú ÌÜ†ÌÅ∞ ÌöçÎìù
    const res: { body: { access_token: string } } = await request(app.getHttpServer())
      .post('/auth/login') // Ïã§Ï†ú Î°úÍ∑∏Ïù∏ API Í≤ΩÎ°ú
      .send({ email: 'test1@gmail.com', password: '1111' }); // ÌÖåÏä§Ìä∏ Ïú†Ï†Ä Ï†ïÎ≥¥

    token = res.body.access_token; // ÌÜ†ÌÅ∞ Ï∂îÏ∂ú
  });

  describe('[GET /movies]', ()=>{
    it('should return all movies', async() => {
        const {body, status, error} =await request(app.getHttpServer()).get('/movies')
          .set('Authorization', `Bearer ${token}`); // ÌÜ†ÌÅ∞ ÏÑ§Ï†ï

        console.log(error);
        expect(status).toBe(200);
    });
  });





});
