import {  WebSocketGateway,OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { ChatService } from './chat.service';
import { Socket } from 'socket.io';
import { AuthService } from 'src/auth/auth.service';
//ConnectedSocket, MessageBody, SubscribeMessage,


// This file is auto-generated by the OpenAPI Generator.interface ExtendedSocket extends Socket {
interface ExtendedSocket extends Socket {
  data: {
    user?: number;
  };
}

@WebSocketGateway()
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {
  constructor(
    private readonly chatService: ChatService,
    private readonly authService: AuthService,
  ) {}

  handleDisconnect(client: ExtendedSocket) {
    const user = client.data?.user;
    if (typeof user === 'number') {
      this.chatService.removeClient(user);
    }
  }

  async handleConnection(client: ExtendedSocket) {
    try {
      const rawToken = client.handshake.headers.authorization ?? '';
      console.log('rawToken', rawToken);

      const payload = await this.authService.parseBearerToken(rawToken, false);
      if (!payload?.sub) {
        client.disconnect();
        return;
      }

      client.data.user = payload.sub;
      this.chatService.registerClient(payload.sub, client);
      await this.chatService.joinUserRooms({ sub: payload.sub }, client);
    } catch (e) {
      console.error(e);
      client.disconnect();
    }
  }
}

