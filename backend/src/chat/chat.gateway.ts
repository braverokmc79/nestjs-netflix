import { ConnectedSocket, MessageBody, SubscribeMessage, WebSocketGateway,OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { ChatService } from './chat.service';
import { Socket } from 'socket.io';
import { AuthService } from 'src/auth/auth.service';


// This file is auto-generated by the OpenAPI Generator.
@WebSocketGateway()
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {
  constructor(
    private readonly chatService: ChatService,
    private readonly authService: AuthService, 
  ) {}

   handleDisconnect(client: Socket) {
    return;
    // const user = client.data.user;

    // if (user) {
    //   this.chatService.removeClient(user.sub);
    // }
  }

  async handleConnection(client: Socket) {
    try {
      // Bearer 'skjcvoizxcjvlzxicv'
      const rawToken = client.handshake.headers.authorization ?? '';

      const payload = await this.authService.parseBearerToken(rawToken, false);

      if (payload) {
        client.data.user = payload;
        // this.chatService.registerClient(payload.sub, client)
        // await this.chatService.joinUserRooms(payload, client);
      } else {
        client.disconnect();
      }
    } catch (e) {
      console.log(e);
      client.disconnect();
    }
  }

  @SubscribeMessage('receiveMessage')
  async receiveMessage(
    @MessageBody() data: { message: string },
    @ConnectedSocket() client: Socket
  ) {
    console.log('receiveMessage');
    console.log(data);
    console.log(client?.id); // safely access the client's id property
  }


  @SubscribeMessage('sendMessage')
  async sendMessage(
    @MessageBody() data: { message: string },
    @ConnectedSocket() client: Socket
  ){
    client.emit('sendMessage',{...data,from :'server',});

  }
  
  



}
