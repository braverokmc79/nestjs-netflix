name: CI/CD for NestJS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: [self-hosted, nextjs-host]

    env: 
      # GitHub Actions RunnerÍ∞Ä ÏßÅÏ†ë ÏÑúÎ≤ÑÏóê ÏÑ§ÏπòÎêú self-hosted runnerÏù∏ Í≤ΩÏö∞ Î°úÏª¨Î°ú ÏÑ§Ï†ï
      HEALTHCHECK_URL: "http://localhost:3000/health"

    steps:
      - name: ‚úÖ Checkout repository
        uses: actions/checkout@v3

      - name: ‚úÖ Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: ‚úÖ List directory contents (initial)
        run: |
          pwd
          ls -alR

      - name: ‚úÖ Create .env file from secrets
        run: |
          mkdir -p backend
          echo "${{ secrets.ENV }}" > backend/.env
          echo ".env created in backend/"

      - name: ‚úÖ Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: ‚úÖ Build backend project
        working-directory: ./backend
        run: npm run build

      - name: ‚úÖ Setup SSH private key and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT }} -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: ‚úÖ Test SSH Connection and Confirm Remote Access
        run: |
          echo "Testing SSH connection to ${{ secrets.USER }}@${{ secrets.HOST }} on port ${{ secrets.PORT }}..."
          ssh -p ${{ secrets.PORT }} ${{ secrets.USER }}@${{ secrets.HOST }} "echo '‚úÖ SSH connection successful: $(hostname)'"

      - name: ‚úÖ Backup current version for rollback
        run: |
          ssh -p ${{ secrets.PORT }} ${{ secrets.USER }}@${{ secrets.HOST }} \
            "cd '${{ secrets.TARGET_DIR }}'; \
            if [ -d backend_current ]; then rm -rf backend_backup && mv backend_current backend_backup; fi"

      - name: ‚úÖ Compress backend build directory
        run: |
          tar -czf backend.tar.gz backend

      - name: ‚úÖ Transfer compressed build to remote server
        run: |
          scp -P ${{ secrets.PORT }} backend.tar.gz ${{ secrets.USER }}@${{ secrets.HOST }}:${{ secrets.TARGET_DIR }}/backend-latest.tar.gz

      - name: ‚úÖ Connect & Extract build (remote)
        run: |
          ssh -p ${{ secrets.PORT }} ${{ secrets.USER }}@${{ secrets.HOST }} \
            "set -e; \
            cd '${{ secrets.TARGET_DIR }}'; \
            mkdir backend_current; \
            tar -xzf backend-latest.tar.gz -C backend_current --strip-components=1; \
            echo '‚úÖ Extraction completed'"

      - name: ‚úÖ Fix permissions on remote server
        run: |
          ssh -p ${{ secrets.PORT }} ${{ secrets.USER }}@${{ secrets.HOST }} \
            "chown -R nextjs:nextjs '${{ secrets.TARGET_DIR }}/backend_current'"

      - name: ‚úÖ Install production dependencies on remote server
        run: |
          ssh -p ${{ secrets.PORT }} ${{ secrets.USER }}@${{ secrets.HOST }} \
            "export NVM_DIR=\$HOME/.nvm && \
              source \$NVM_DIR/nvm.sh && \
              nvm use 20 && \
              cd '${{ secrets.TARGET_DIR }}/backend_current' && \
              npm install --omit=dev"

      - name: ‚úÖ Zero Downtime Reload using PM2
        run: |
          ssh -p ${{ secrets.PORT }} ${{ secrets.USER }}@${{ secrets.HOST }} \
            "export NVM_DIR=\$HOME/.nvm && \
              source \$NVM_DIR/nvm.sh && \
              nvm use 20 && \
              cd '${{ secrets.TARGET_DIR }}/backend_current' && \
              pm2 reload app || pm2 start dist/main.js --name app && \
              pm2 save"

      # - name: ‚úÖ Health Check (2-min timeout, 5s intervals)
      #   run: |
      #     echo "Checking health at $HEALTHCHECK_URL"
      #     for i in {1..72}; do
      #       http_code=$(curl --max-time 2 -s -o /dev/null -w "%{http_code}" "$HEALTHCHECK_URL")
      #       if [ "$http_code" = "200" ]; then
      #         echo "‚úÖ Healthy!"
      #         exit 0
      #       fi
      #       echo "‚ùå $i/72 - HTTP $http_code, retrying..."
      #       sleep 5
      #     done
      #     echo "üî• Health check failed after 2 minutes."
      #     exit 1
            

      # - name: ‚úÖ Rollback if health check failed
      #   if: failure()
      #   run: |
      #     echo "Rolling back to previous stable version..."
      #     ssh -p ${{ secrets.PORT }} ${{ secrets.USER }}@${{ secrets.HOST }} \
      #       "cd '${{ secrets.TARGET_DIR }}'; \
      #       rm -rf backend_current; \
      #       mv backend_backup backend_current; \
      #       export NVM_DIR=\$HOME/.nvm && source \$NVM_DIR/nvm.sh && nvm use 20 && cd backend_current && pm2 reload app && pm2 save"

      - name: ‚úÖ Slack Notification on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚úÖ NestJS deployment succeeded!",
              "attachments": [
                {
                  "color": "#36a64f",
                  "fields": [
                    {"title": "Branch", "value": "${{ github.ref }}", "short": true},
                    {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                    {"title": "Actor", "value": "${{ github.actor }}", "short": true},
                    {"title": "Repository", "value": "${{ github.repository }}", "short": true}
                  ]
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ‚úÖ Slack Notification on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚ùå NestJS deployment failed and rollback executed!",
              "attachments": [
                {
                  "color": "#ff0000",
                  "fields": [
                    {"title": "Branch", "value": "${{ github.ref }}", "short": true},
                    {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                    {"title": "Actor", "value": "${{ github.actor }}", "short": true},
                    {"title": "Repository", "value": "${{ github.repository }}", "short": true}
                  ]
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ‚úÖ Slack Deployment Diff Info
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "üîç Deployment Info:",
              "attachments": [
                {
                  "color": "#439FE0",
                  "fields": [
                    {"title": "Commit Message", "value": "${{ github.event.head_commit.message }}"},
                    {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}"},
                    {"title": "Commit Timestamp", "value": "${{ github.event.head_commit.timestamp }}"}
                  ]
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
